// tslint:disable
/**
 * Version 1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ChangedZapis,
    MainPageZapis,
    NewZapis,
    Zapis,
    ZapisPost,
    ZapisPut,
} from '../models';

export interface ZapisiGetRequest {
    startIndex?: number;
    limit?: number;
}

export interface ZapisiIdDeleteRequest {
    id: string;
}

export interface ZapisiIdGetRequest {
    id: string;
}

export interface ZapisiIdPatchRequest {
    id: string;
    zapisPut: ZapisPut;
}

export interface ZapisiOptimizedGetRequest {
    startIndex?: number;
    limit?: number;
}

export interface ZapisiPostRequest {
    zapisPost: ZapisPost;
}

/**
 * no description
 */
export class ZapisiApi extends BaseAPI {

    /**
     */
    zapisiGet({ startIndex, limit }: ZapisiGetRequest): Observable<Array<Zapis>>
    zapisiGet({ startIndex, limit }: ZapisiGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Zapis>>>
    zapisiGet({ startIndex, limit }: ZapisiGetRequest, opts?: OperationOpts): Observable<Array<Zapis> | AjaxResponse<Array<Zapis>>> {

        const query: HttpQuery = {};

        if (startIndex != null) { query['startIndex'] = startIndex; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<Zapis>>({
            url: '/zapisi',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    zapisiIdDelete({ id }: ZapisiIdDeleteRequest): Observable<void>
    zapisiIdDelete({ id }: ZapisiIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    zapisiIdDelete({ id }: ZapisiIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'zapisiIdDelete');

        return this.request<void>({
            url: '/zapisi/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    zapisiIdGet({ id }: ZapisiIdGetRequest): Observable<Zapis>
    zapisiIdGet({ id }: ZapisiIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Zapis>>
    zapisiIdGet({ id }: ZapisiIdGetRequest, opts?: OperationOpts): Observable<Zapis | AjaxResponse<Zapis>> {
        throwIfNullOrUndefined(id, 'id', 'zapisiIdGet');

        return this.request<Zapis>({
            url: '/zapisi/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    zapisiIdPatch({ id, zapisPut }: ZapisiIdPatchRequest): Observable<ChangedZapis>
    zapisiIdPatch({ id, zapisPut }: ZapisiIdPatchRequest, opts?: OperationOpts): Observable<AjaxResponse<ChangedZapis>>
    zapisiIdPatch({ id, zapisPut }: ZapisiIdPatchRequest, opts?: OperationOpts): Observable<ChangedZapis | AjaxResponse<ChangedZapis>> {
        throwIfNullOrUndefined(id, 'id', 'zapisiIdPatch');
        throwIfNullOrUndefined(zapisPut, 'zapisPut', 'zapisiIdPatch');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ChangedZapis>({
            url: '/zapisi/{id}'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: zapisPut,
        }, opts?.responseOpts);
    };

    /**
     */
    zapisiOptimizedGet({ startIndex, limit }: ZapisiOptimizedGetRequest): Observable<Array<MainPageZapis>>
    zapisiOptimizedGet({ startIndex, limit }: ZapisiOptimizedGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<MainPageZapis>>>
    zapisiOptimizedGet({ startIndex, limit }: ZapisiOptimizedGetRequest, opts?: OperationOpts): Observable<Array<MainPageZapis> | AjaxResponse<Array<MainPageZapis>>> {

        const query: HttpQuery = {};

        if (startIndex != null) { query['startIndex'] = startIndex; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<MainPageZapis>>({
            url: '/zapisi/optimized',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    zapisiPost({ zapisPost }: ZapisiPostRequest): Observable<NewZapis>
    zapisiPost({ zapisPost }: ZapisiPostRequest, opts?: OperationOpts): Observable<AjaxResponse<NewZapis>>
    zapisiPost({ zapisPost }: ZapisiPostRequest, opts?: OperationOpts): Observable<NewZapis | AjaxResponse<NewZapis>> {
        throwIfNullOrUndefined(zapisPost, 'zapisPost', 'zapisiPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<NewZapis>({
            url: '/zapisi',
            method: 'POST',
            headers,
            body: zapisPost,
        }, opts?.responseOpts);
    };

}
